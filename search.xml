<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法题（七）</title>
      <link href="2020/12/15/7/"/>
      <url>2020/12/15/7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动态规划解买卖股票的最佳时机含手续费"><a href="#动态规划解买卖股票的最佳时机含手续费" class="headerlink" title="动态规划解买卖股票的最佳时机含手续费"></a>动态规划解买卖股票的最佳时机含手续费</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个整数数组prices，其中第i个元素代表了第i天的股票价格；非负整数<br>fee代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了<br>一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为<br>支付一次手续费</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入: prices = [1, 3, 2, 8, 4, 9], fee = 2<br>输出: 8<br>解释: 能够达到的最大利润:<br>在此处买入 prices[0] = 1<br>在此处卖出 prices[3] = 8<br>在此处买入 prices[4] = 4<br>在此处卖出 prices[5] = 9<br>总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</p><p>注意:<br>0 &lt; prices.length &lt;= 50000.<br>0 &lt; prices[i] &lt; 50000.<br>0 &lt;= fee &lt; 50000.</p><h3 id="动态规划解决"><a href="#动态规划解决" class="headerlink" title="动态规划解决"></a>动态规划解决</h3><p>定义<br>dp[i][0]表示第i天交易完之后手里没有股票的最大利润。<br>dp[i][1]表示第i天交易完之后手里持有股票的最大利润。</p><p>当天交易完之后手里没有股票可能有两种情况:<br>1.一种是当天没有进行任何交易，又因为当天手里没有股票，所以当天没有股票的利<br>润只能取前一天手里没有股票的利润。<br>2.一种是把当天手里的股票给卖了，既然能卖，说明手里是有股票的，所以这个时候<br>当天没有股票的利润要取前一天手里有股票的利润加上当天股票能卖的价格再减去<br>手续费。</p><p>这两种情况我们取利润最大的即可，所以可以得到<br>dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i]-fee);</p><p>当天交易完之后手里持有股票也有两种情况：<br>1.一种是当天没有任何交易，又因为当天手里持有股票，所以当天手里持有的股票其实<br>前一天就已经持有了。<br>2.还一种是当天买入了股票，当天能卖股票，说明前一天手里肯定是没有股票的。<br>dp[i][1]=max(dp[i-1][1],dp[i-1][0]-prices[i]);</p><p>动态规划的递推公式有了，那么初始条件是什么呢，就是第0天<br>如果买入：dp[0][1]=-prices[0];<br>如果没买：dp[0][0]=0;</p><p>代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public int maxProfit(int[] prices, int fee) &#123; 2    &#x2F;&#x2F;边界条件判断 3    if (prices &#x3D;&#x3D; null || prices.length &lt; 2) 4        return 0; 5    int length &#x3D; prices.length; 6    int[][] dp &#x3D; new int[length][2]; 7    &#x2F;&#x2F;初始条件 8    dp[0][1] &#x3D; -prices[0]; 9    dp[0][0] &#x3D; 0;10    for (int i &#x3D; 1; i &lt; length; i++) &#123;11        &#x2F;&#x2F;递推公式12        dp[i][0] &#x3D; Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i] - fee);13        dp[i][1] &#x3D; Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);14    &#125;15    &#x2F;&#x2F;最后一天肯定是手里没有股票的时候，利润才会最大，16    &#x2F;&#x2F;只需要返回dp[length - 1][0]即可17    return dp[length - 1][0];18 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码优化<br>上面计算的时候我们看到当天的利润只和前一天的记录有关，没必要使用一个二维数组，只需要使用两个变量：<br>一个记录当天交易完之后手里持有股票的最大利润。<br>一个记录当天交易完之后手里没有股票的最大利润。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public int maxProfit(int[] prices, int fee) &#123; 2    &#x2F;&#x2F;边界条件判断 3    if (prices &#x3D;&#x3D; null || prices.length &lt; 2) 4        return 0; 5    int length &#x3D; prices.length; 6    &#x2F;&#x2F;初始条件 7    int hold &#x3D; -prices[0];&#x2F;&#x2F;持有股票 8    int noHold &#x3D; 0;&#x2F;&#x2F;没持有股票 9    for (int i &#x3D; 1; i &lt; length; i++) &#123;10        &#x2F;&#x2F;递推公式转化的11        noHold &#x3D; Math.max(noHold, hold + prices[i] - fee);12        hold &#x3D; Math.max(hold, noHold - prices[i]);13    &#125;14    &#x2F;&#x2F;最后一天肯定是手里没有股票的时候利润才会最大15    &#x2F;&#x2F;所以这里返回的是noHold16    return noHold;17 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库（一）</title>
      <link href="2020/12/12/sql1/"/>
      <url>2020/12/12/sql1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h1><h2 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h2><p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p><p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</p><p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。</p><p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</p><h2 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h2><h3 id="1-读写锁"><a href="#1-读写锁" class="headerlink" title="1. 读写锁"></a>1. 读写锁</h3><p>互斥锁（Exclusive），简写为 X 锁，又称写锁。<br>共享锁（Shared），简写为 S 锁，又称读锁。</p><p>有以下两个规定：<br>1.一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。<br>2.一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务<br>能对 A 加 S 锁，但是不能加 X 锁。</p><p>锁的兼容关系如下：<br><img src="/2020/12/12/sql1/1.png" width="600" height="400"></p><h3 id="2-意向锁"><a href="#2-意向锁" class="headerlink" title="2. 意向锁"></a>2. 意向锁</h3><p>使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。</p><p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者<br>表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p><p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行<br>上加 X 锁或 S 锁。有以下两个规定：<br>1.一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；<br>2.一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</p><p>各种锁的兼容关系如下：<br><img src="/2020/12/12/sql1/2.png" width="600" height="400"></p><p>解释如下：</p><p>1.任意IS/IX锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁；<br>2.这里兼容关系针对的是表级锁，而表级的IX锁和行级的X锁兼容，两个事务可以对两个数据行加X锁。<br>（事务T1想要对数据行R1加X锁，事务T2想要对同一个表的数据行R2加X锁，两个事务都需 要对该表加IX<br>锁，但是IX锁是兼容的，并且IX锁与行级的X锁也是兼容的，因此两个事务都能加 锁成功，对同一个表中<br>的两个数据行做修改。）</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题（六）</title>
      <link href="2020/12/10/6/"/>
      <url>2020/12/10/6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动态规划解打家劫舍-III"><a href="#动态规划解打家劫舍-III" class="headerlink" title="动态规划解打家劫舍 III"></a>动态规划解打家劫舍 III</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的 地区。这个地区只有一个入口，我们<br>称之为“根”。除了“根”之外，每栋房 子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这<br>个地方的所有房屋的排列类似于一棵二叉树”。如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><img src="/2020/12/10/6/示例1.png" width="400" height="500"><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><img src="/2020/12/10/6/示例2.png" width="400" height="500"><h3 id="动态规划解决"><a href="#动态规划解决" class="headerlink" title="动态规划解决"></a>动态规划解决</h3><p>对于二叉树的每一个节点都有两种状态，一种是偷，一种是不偷。我们定义一个长度为2的数组dp，其中dp[0]表<br>示不偷当前这个节点所能偷窃的最高金额，dp[1]表示偷当前节点所能偷窃的最高金额。</p><p>我们就从根节点开遍历这棵二叉树。<br>如果偷根节点，那么就不能偷根节点的两个子节点，所以<br>dp[1]=root.val+left.dp[0]+right.dp[0];<br>这里的伪代码left.dp[0]表示的是不能偷当前节点的左子节点</p><p>如果不偷根节点，那么我们可以偷子节点也可以不偷子节点，我们取最大值即可，所以<br>dp[0]=max(left.dp[0],left.dp[1])+max(right.dp[0],right.dp[1]);</p><p>那么边界条件是什么呢，就是节点为空的时候，直接返回0即可。</p><p>最终代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public int rob(TreeNode root) &#123; 2    int[] robHelp &#x3D; robHelper(root); 3    &#x2F;&#x2F;取偷根节点和不偷根节点的最大值 4    return Math.max(robHelp[1], robHelp[0]); 5 &#125; 6 7 public int[] robHelper(TreeNode root) &#123; 8    &#x2F;&#x2F;边界条件 9    if (root &#x3D;&#x3D; null)10        return new int[2];11    &#x2F;&#x2F;这里的left是个长度为2的一维数组，其中left[0]表示不偷root.left节点12    &#x2F;&#x2F;所能偷窃的最大金额，left[1]表示偷root.left节点所能偷窃的最大金额。13    int[] left &#x3D; robHelper(root.left);14    &#x2F;&#x2F;right节点同left15    int[] right &#x3D; robHelper(root.right);16    &#x2F;&#x2F;Math.max(right[0], right[1]), root.val + left[0] + right[0]表示17    &#x2F;&#x2F;的是不能偷当前节点，所以可以偷两个子节点，也可以不偷子节点，我们取最大的。18    &#x2F;&#x2F;root.val + left[1] + right[1]表示的是偷当前节点，所以不能偷两个子节点。19    return new int[]&#123;Math.max(left[0], left[1]) +20            Math.max(right[0], right[1]), root.val + left[0] + right[0]&#125;;21 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题（五）</title>
      <link href="2020/12/08/5/"/>
      <url>2020/12/08/5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="剑指-Offer-回溯算法解二叉树中和为某一值的路径"><a href="#剑指-Offer-回溯算法解二叉树中和为某一值的路径" class="headerlink" title="剑指 Offer-回溯算法解二叉树中和为某一值的路径"></a>剑指 Offer-回溯算法解二叉树中和为某一值的路径</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始<br>往下一直到叶节点所经过的节点形成一条路径。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>输入：<br>给定如下二叉树，以及目标和 sum = 22<br>二叉树层序遍历分别是 5,4,8,11,13,4,7,2,5,1</p><p>输出：<br>[ [5,4,11,2],<br>  [5,8,4,5]]</p><h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><p>这题没说sum是正数还是负数，也没说树中节点的值有没有负数。我们要做的是从根节点到叶子节点遍<br>历他所有的路径，返回他所有路径中和等于sum的节点，这里有两种实现方式，一种是减，一种是加。<br>减就是从根节点开始，用sum不断的减去遍历到的每一个节点，一直到叶子节点，在减去叶子节点之前<br>查看sum是否等于叶子节点，如果等于说明我们找到了一组。</p><p>代码如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int sum) &#123; 2    List&lt;List&lt;Integer&gt;&gt; result &#x3D; new ArrayList&lt;&gt;(); 3    dfs(root, sum, new ArrayList&lt;&gt;(), result); 4    return result; 5 &#125; 6 7 public void dfs(TreeNode root, int sum, List&lt;Integer&gt; list, 8                List&lt;List&lt;Integer&gt;&gt; result) &#123; 9    &#x2F;&#x2F;如果节点为空直接返回10    if (root &#x3D;&#x3D; null)11        return;12    &#x2F;&#x2F;因为list是引用传递，为了防止递归的时候分支污染，我们要在每个路径13    &#x2F;&#x2F;中都要新建一个subList14    List&lt;Integer&gt; subList &#x3D; new ArrayList&lt;&gt;(list);15    &#x2F;&#x2F;把当前节点值加入到subList中16    subList.add(new Integer(root.val));17    &#x2F;&#x2F;如果到达叶子节点，就不能往下走了，直接return18    if (root.left &#x3D;&#x3D; null &amp;&amp; root.right &#x3D;&#x3D; null) &#123;19        &#x2F;&#x2F;如果到达叶子节点，并且sum等于叶子节点的值，说明我们找到了一组，20        &#x2F;&#x2F;要把它放到result中21        if (sum &#x3D;&#x3D; root.val)22            result.add(subList);23        &#x2F;&#x2F;到叶子节点之后直接返回，因为在往下就走不动了24        return;25    &#125;26    &#x2F;&#x2F;如果没到达叶子节点，就继续从他的左右两个子节点往下找，注意到27    &#x2F;&#x2F;下一步的时候，sum值要减去当前节点的值28    dfs(root.left, sum - root.val, subList, result);29    dfs(root.right, sum - root.val, subList, result);30 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面只是对二叉树的深度优先搜索（DFS），并没有使用回溯，之前讲递归的时候提到过为了防止分支污染<br>我们还可以把使用过的值在返回的时候把它给remove掉，这就是大家常提的回溯算法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int sum) &#123; 2    List&lt;List&lt;Integer&gt;&gt; result &#x3D; new ArrayList&lt;&gt;(); 3    dfs(root, sum, new ArrayList&lt;&gt;(), result); 4    return result; 5 &#125; 6 7 public void dfs(TreeNode root, int sum, List&lt;Integer&gt; list, 8                List&lt;List&lt;Integer&gt;&gt; result) &#123; 9    &#x2F;&#x2F;如果节点为空直接返回10    if (root &#x3D;&#x3D; null)11        return;12    &#x2F;&#x2F;把当前节点值加入到list中13    list.add(new Integer(root.val));14    &#x2F;&#x2F;如果到达叶子节点，就不能往下走了，直接return15    if (root.left &#x3D;&#x3D; null &amp;&amp; root.right &#x3D;&#x3D; null) &#123;16        &#x2F;&#x2F;如果到达叶子节点，并且sum等于叶子节点的值，说明我们找到了一组，17        &#x2F;&#x2F;要把它放到result中18        if (sum &#x3D;&#x3D; root.val)19            result.add(new ArrayList(list));20        &#x2F;&#x2F;注意别忘了把最后加入的结点值给移除掉，因为下一步直接return了，21        &#x2F;&#x2F;不会再走最后一行的remove了，所以这里在rerurn之前提前把最后22        &#x2F;&#x2F;一个结点的值给remove掉。23        list.remove(list.size() - 1);24        &#x2F;&#x2F;到叶子节点之后直接返回，因为在往下就走不动了25        return;26    &#125;27    &#x2F;&#x2F;如果没到达叶子节点，就继续从他的左右两个子节点往下找，注意到28    &#x2F;&#x2F;下一步的时候，sum值要减去当前节点的值29    dfs(root.left, sum - root.val, list, result);30    dfs(root.right, sum - root.val, list, result);31    &#x2F;&#x2F;我们要理解递归的本质，当递归往下传递的时候他最后还是会往回走，32    &#x2F;&#x2F;我们把这个值使用完之后还要把它给移除，这就是回溯33    list.remove(list.size() - 1);34 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是减的方式，我们再来看一个加的方式，其实他就是从根节点开始到叶子节点把这个路径上的所有节点都<br>加起来，最后查看是否等于sum</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int sum) &#123; 2    List&lt;List&lt;Integer&gt;&gt; result &#x3D; new ArrayList&lt;&gt;(); 3    dfs(root, sum, 0, new ArrayList&lt;&gt;(), result); 4    return result; 5 &#125; 6 7 public void dfs(TreeNode root, int sum, int toal, List&lt;Integer&gt; list, 8                List&lt;List&lt;Integer&gt;&gt; result) &#123; 9    &#x2F;&#x2F;如果节点为空直接返回10    if (root &#x3D;&#x3D; null)11        return;12    &#x2F;&#x2F;把当前节点值加入到list中13    list.add(new Integer(root.val));14    &#x2F;&#x2F;没往下走一步就要计算走过的路径和15    toal +&#x3D; root.val;16    &#x2F;&#x2F;如果到达叶子节点，就不能往下走了，直接return17    if (root.left &#x3D;&#x3D; null &amp;&amp; root.right &#x3D;&#x3D; null) &#123;18        &#x2F;&#x2F;如果到达叶子节点，并且sum等于toal，说明我们找到了一组，19        &#x2F;&#x2F;要把它放到result中20        if (sum &#x3D;&#x3D; toal)21            result.add(new ArrayList(list));22        &#x2F;&#x2F;注意别忘了把最后加入的结点值给移除掉，因为下一步直接return了，23        &#x2F;&#x2F;不会再走最后一行的remove了，所以这里在rerurn之前提前把最后24        &#x2F;&#x2F;一个结点的值给remove掉。25        list.remove(list.size() - 1);26        &#x2F;&#x2F;到叶子节点之后直接返回，因为在往下就走不动了27        return;28    &#125;29    &#x2F;&#x2F;如果没到达叶子节点，就继续从他的左右两个子节点往下找30    dfs(root.left, sum, toal, list, result);31    dfs(root.right, sum, toal, list, result);32    &#x2F;&#x2F;我们要理解递归的本质，当递归往下传递的时候他最后还是会往回走，33    &#x2F;&#x2F;我们把这个值使用完之后还要把它给移除，这就是回溯34    list.remove(list.size() - 1);35 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题（四）</title>
      <link href="2020/12/05/4/"/>
      <url>2020/12/05/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="剑指offer12-回溯算法解矩阵中的路径"><a href="#剑指offer12-回溯算法解矩阵中的路径" class="headerlink" title="剑指offer12-回溯算法解矩阵中的路径"></a>剑指offer12-回溯算法解矩阵中的路径</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，<br>每一步可以在矩阵中向上下左右移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不<br>能再进入该格子。</p><p>例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。<br>[[“a”,”b”,”c”,”e”],<br>[“s”,”f”,”c”,”s”],<br>[“a”,”d”,”e”,”e”]]</p><p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子<br>之后，路径不能再次进入这个格子。</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入：<br>board = [[“A”,”B”,”C”,”E”],<br>        [“S”,”F”,”C”,”S”],<br>        [“A”,”D”,”E”,”E”]],<br>word = “ABCCED”<br>输出：true</p><h3 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h3><p>输入：board = [[“a”,”b”],<br>              [“c”,”d”]],<br>word = “abcd”<br>输出：false</p><p>提示：<br>1 &lt;= board.length &lt;= 200<br>1 &lt;= board[i].length &lt;= 200</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用回溯法（backtracking）进行求解，它是一种暴力搜索方法，通过搜索所有可能的结果来求解<br>问题。回溯法在一次搜索结束时需要进行回溯（回退），将这一次搜索过程中设置的状态进行清除，<br>从而开始一次新的搜索过程。</p><p>从矩形中的一个点开始往他的上下左右四个方向查找，这个点可以是矩形中的任何一个点，所以代码<br>的大致轮廓我们应该能写出来，就是遍历矩形所有的点，然后从这个点开始往他的4个方向走，因为是<br>二维数组，所以有两个for循环，代码如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public boolean exist(char[][] board, String word) &#123; 2    char[] words &#x3D; word.toCharArray(); 3    for (int i &#x3D; 0; i &lt; board.length; i++) &#123; 4        for (int j &#x3D; 0; j &lt; board[0].length; j++) &#123; 5            &#x2F;&#x2F;从[i,j]这个坐标开始查找 6            if (dfs(board, words, i, j, 0)) 7                return true; 8        &#125; 9    &#125;10    return false;11 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里关键代码是dfs这个函数，因为每一个点我们都可以往他的4个方向查找，所以我们可以把它想象<br>为一棵4叉树，就是每个节点有4个子节点，而树的遍历我们最容易想到的就是递归，我们来大概看一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 boolean dfs(char[][] board, char[] word, int i, int j, int index) &#123; 2    if (边界条件的判断) &#123; 3        return; 4    &#125; 5 6    一些逻辑处理 7 8    boolean res; 9    &#x2F;&#x2F;往右10    res &#x3D; dfs(board, word, i + 1, j, index + 1)11    &#x2F;&#x2F;往左12    res |&#x3D; dfs(board, word, i - 1, j, index + 1)13    &#x2F;&#x2F;往下14    res |&#x3D; dfs(board, word, i, j + 1, index + 1)15    &#x2F;&#x2F;往上16    res |&#x3D; dfs(board, word, i, j - 1, index + 1)17    &#x2F;&#x2F;上面4个方向，只要有一个能查找到，就返回true；18    return res;19 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 boolean dfs(char[][] board, char[] word, int i, int j, int index) &#123; 2    &#x2F;&#x2F;边界的判断，如果越界直接返回false。index表示的是查找到字符串word的第几个字符， 3    &#x2F;&#x2F;如果这个字符不等于board[i][j]，说明验证这个坐标路径是走不通的，直接返回false 4    if (i &gt;&#x3D; board.length || i &lt; 0 || j &gt;&#x3D; board[0].length || j &lt; 0 ||                board[i][j] !&#x3D; word[index]) 5        return false; 6    &#x2F;&#x2F;如果word的每个字符都查找完了，直接返回true 7    if (index &#x3D;&#x3D; word.length - 1) 8        return true; 9    &#x2F;&#x2F;为了防止分支污染，把board数组复制一份10    char[][] newArra &#x3D; copyArray(board);11    &#x2F;&#x2F;把newArra[i][j]置为特殊符号，表示已经被使用过了(注意：word中不能包含&#39;.&#39;)12    newArra[i][j] &#x3D; &#39;.&#39;;13    &#x2F;&#x2F;从当前坐标的上下左右四个方向查找14    boolean res &#x3D; dfs(newArra, word, i + 1, j, index + 1) ||dfs(newArra, word, i - 1, j, index + 1) ||15            dfs(newArra, word, i, j + 1, index + 1) || dfs(newArra, word, i, j - 1, index + 1);16    return res;17 &#125;1819 &#x2F;&#x2F;复制一份新的数组20 private char[][] copyArray(char[][] word) &#123;21    char[][] newArray &#x3D; new char[word.length][word[0].length];22    for (int i &#x3D; 0; i &lt; word.length; i++) &#123;23        for (int j &#x3D; 0; j &lt; word[0].length; j++) &#123;24            newArray[i][j] &#x3D; word[i][j];25        &#125;26    &#125;27    return newArray;28 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里在第10行是新建了一个数组，因为一般来说数组都是引用传递，当我们在一个分支修改了数组<br>之后，其他分支上的数据也会改变，这也就造成了分支污染。所以在递归往下传递的时候我们都会<br>新建一个数组，这样在当前分支的修改并不会影响到其他的分支，也就不会出错。</p><p>这样虽然也能解决问题，但每次递归传递的时候都要创建一个新的数组，会造成大量的空间浪费，<br>并且每次都创建也非常耗时，所以一般我们都不会使用上面的方式。我们会使用另外一个方法，<br>也就是回溯。那么回溯又是如何解决这个问题的呢，要想弄懂回溯我们首先要搞懂递归，递归分<br>为两步，先是递，然后才是归。当我们沿着当前坐标往下传递的时候，我们可以把当前坐标的值<br>修改，然后回归到当前坐标的时候再把当前坐标的值复原，这就是回溯的过程。我们来看下代码，<br>比上面简洁了好多，运行效率也会有很大的提升。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 boolean dfs(char[][] board, char[] word, int i, int j, int index) &#123; 2    &#x2F;&#x2F;边界的判断，如果越界直接返回false。index表示的是查找到字符串word的第几个字符， 3    &#x2F;&#x2F;如果这个字符不等于board[i][j]，说明验证这个坐标路径是走不通的，直接返回false 4    if (i &gt;&#x3D; board.length || i &lt; 0 || j &gt;&#x3D; board[0].length || j &lt; 0 || board[i][j] !&#x3D; word[index]) 5        return false; 6    &#x2F;&#x2F;如果word的每个字符都查找完了，直接返回true 7    if (index &#x3D;&#x3D; word.length - 1) 8        return true; 9    &#x2F;&#x2F;把当前坐标的值保存下来，为了在最后复原10    char tmp &#x3D; board[i][j];11    &#x2F;&#x2F;然后修改当前坐标的值12    board[i][j] &#x3D; &#39;.&#39;;13    &#x2F;&#x2F;走递归，沿着当前坐标的上下左右4个方向查找14    boolean res &#x3D; dfs(board, word, i + 1, j, index + 1) || dfs(board, word, i - 1, j, index + 1) ||15            dfs(board, word, i, j + 1, index + 1) || dfs(board, word, i, j - 1, index + 1);16    &#x2F;&#x2F;递归之后再把当前的坐标复原17    board[i][j] &#x3D; tmp;18    return res;19 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题（三）</title>
      <link href="2020/12/02/3/"/>
      <url>2020/12/02/3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="回溯算法解活字印刷"><a href="#回溯算法解活字印刷" class="headerlink" title="回溯算法解活字印刷"></a>回溯算法解活字印刷</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>你有一套活字字模tiles， 其中每个字模上都刻有一个字母tiles[i]。返回你可以印出的<br>非空字母序列的数目。</p><p>注意：本题中，每个活字字模只能使用一次。</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入：”AAB”<br>输出：8<br>解释：可能的序列为 “A”, “B”, “AA”, “AB”, “BA”, “AAB”, “ABA”, “BAA”。</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>输入：”AAABBC”<br>输出：188</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ol><li>1 &lt;= tiles.length &lt;= 7</li><li>tiles 由大写英文字母组成</li></ol><h3 id="回溯算法解决"><a href="#回溯算法解决" class="headerlink" title="回溯算法解决"></a>回溯算法解决</h3><p>这题实际上是让求输入的字符可以组成多少种不同的组合</p><img src="/2020/12/02/3/1.png" width="400" height="400"><p>代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public int numTilePossibilities(String tiles) &#123; 2    char[] chars &#x3D; tiles.toCharArray(); 3    &#x2F;&#x2F;先排序，目的是让相同的字符挨着，在下面计算的时候好过滤掉重复的 4    Arrays.sort(chars); 5    int[] res &#x3D; new int[1]; 6    backtrack(res, chars, new boolean[tiles.length()], tiles.length(), 0); 7    return res[0]; 8 &#125; 910 private void backtrack(int[] res, char[] chars, boolean[] used, int length, int index) &#123;11    &#x2F;&#x2F;如果没有可以选择的就返回12    if (index &#x3D;&#x3D; length)13        return;14    &#x2F;&#x2F;注意，这里的i每次都是从0开始的，不是从index开始15    for (int i &#x3D; 0; i &lt; length; i++) &#123;16        &#x2F;&#x2F;一个字符只能选择一次，如果当前字符已经选择了，就不能再选了。17        if (used[i])18            continue;19        &#x2F;&#x2F;过滤掉重复的结果20        if (i - 1 &gt;&#x3D; 0 &amp;&amp; chars[i] &#x3D;&#x3D; chars[i - 1] &amp;&amp; !used[i - 1])21            continue;22        &#x2F;&#x2F;选择当前字符，并把它标记为已选择23        used[i] &#x3D; true;24        res[0]++;&#x2F;&#x2F;选择一个字符，就多了一种结果25        &#x2F;&#x2F;下一分支继续递归26        backtrack(res, chars, used, length, index + 1);27        &#x2F;&#x2F;使用完之后再把它给复原。28        used[i] &#x3D; false;29    &#125;30 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里还可以换一种写法，先统计每个字符的数量，然后再使用，代码如下。原理都类似，但他不需要去重，因为这里根本不可能出现重复的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public int numTilePossibilities(String tiles) &#123; 2    char[] chars &#x3D; tiles.toCharArray(); 3    &#x2F;&#x2F;统计每个字符的数量 4    int[] count &#x3D; new int[26]; 5    for (char c : chars) 6        count[c - &#39;A&#39;]++; 7    int[] res &#x3D; new int[1]; 8    backtrack(res, count); 9    return res[0];10 &#125;1112 private void backtrack(int[] res, int[] arr) &#123;13    &#x2F;&#x2F;遍历所有的字符14    for (int i &#x3D; 0; i &lt; 26; i++) &#123;15        &#x2F;&#x2F;如果当前字符使用完了再查找下一个16        if (arr[i] &#x3D;&#x3D; 0)17            continue;18        &#x2F;&#x2F;如果没使用完就继续使用，然后把这个字符的数量减119        arr[i]--;20        &#x2F;&#x2F;使用一个字符，子集数量就会多一个21        res[0]++;22        backtrack(res, arr);23        &#x2F;&#x2F;当前字符使用完之后，把它的数量还原24        arr[i]++;25    &#125;26 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题（二）</title>
      <link href="2020/11/30/2/"/>
      <url>2020/11/30/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="回溯算法解火柴拼正方形"><a href="#回溯算法解火柴拼正方形" class="headerlink" title="回溯算法解火柴拼正方形"></a>回溯算法解火柴拼正方形</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>输入为小女孩拥有火柴的数目，每根火柴用其长度表示。输出即为是否能用所有的火柴拼成正方形；</p><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><p>输入：[1,1,2,2,2]<br>输出：true</p><p>解释：能拼成一个边长为2的正方形，每边两根火柴</p><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><p>输入：[3,3,3,3,4]<br>输出：false</p><p>注意:<br>1.给定的火柴长度和在0到10^9之间。<br>2.火柴数组的长度不超过15。</p><p>解释：不能用所有火柴拼成一个正方形</p><h3 id="回溯算法解决"><a href="#回溯算法解决" class="headerlink" title="回溯算法解决"></a>回溯算法解决</h3><p>1.首先先求出所有火柴的长度，然后判断是否是4的倍数，如果不是，直接返回false，表示不能拼接成正方形，如果是4的倍数然后在往下走。<br>2.把每一根火柴都尝试往4条边上放，如果最终能构成正方形，直接返回true。</p><p>回溯算法，就是不断的尝试，一旦成功也就成功了。如果不成功，在回到上一步继续尝试，有一个经典的模板</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 private void backtrack(&quot;原始参数&quot;) &#123; 2    &#x2F;&#x2F;终止条件(递归必须要有终止条件) 3    if (&quot;终止条件&quot;) &#123; 4        &#x2F;&#x2F;一些逻辑操作（可有可无，视情况而定） 5        return; 6    &#125; 7 8    for (int i &#x3D; &quot;for循环开始的参数&quot;; i &lt; &quot;for循环结束的参数&quot;; i++) &#123; 9        &#x2F;&#x2F;一些逻辑操作（可有可无，视情况而定）1011        &#x2F;&#x2F;做出选择1213        &#x2F;&#x2F;递归14        backtrack(&quot;新的参数&quot;);15        &#x2F;&#x2F;一些逻辑操作（可有可无，视情况而定）1617        &#x2F;&#x2F;撤销选择18    &#125;19 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1  public boolean makesquare(int[] nums) &#123; 2    int total &#x3D; 0; 3    &#x2F;&#x2F;统计所有火柴的长度 4    for (int num : nums) &#123; 5        total +&#x3D; num; 6    &#125; 7    &#x2F;&#x2F;如果所有火柴的长度不是4的倍数，直接返回false 8    if (total &#x3D;&#x3D; 0 || (total &amp; 3) !&#x3D; 0) 9        return false;10    &#x2F;&#x2F;回溯11    return backtrack(nums, 0, total &gt;&gt; 2, new int[4]);12  &#125;13 14  &#x2F;&#x2F;index表示访问到当前火柴的位置，target表示正方形的边长，size是长度为4的数组，15  &#x2F;&#x2F;分别保存正方形4个边的长度16  private boolean backtrack(int[] nums, int index, int target, int[] size) &#123;17    if (index &#x3D;&#x3D; nums.length) &#123;18        &#x2F;&#x2F;如果火柴都访问完了，并且size的4个边的长度都相等，说明是正方形，直接返回true，19        &#x2F;&#x2F;否则返回false20        if (size[0] &#x3D;&#x3D; size[1] &amp;&amp; size[1] &#x3D;&#x3D; size[2] &amp;&amp; size[2] &#x3D;&#x3D; size[3])21            return true;22        return false;23    &#125;24    &#x2F;&#x2F;到这一步说明火柴还没访问完25    for (int i &#x3D; 0; i &lt; size.length; i++) &#123;26        &#x2F;&#x2F;如果把当前火柴放到size[i]这个边上，他的长度大于target，我们直接跳过27        if (size[i] + nums[index] &gt; target)28            continue;29        &#x2F;&#x2F;如果当前火柴放到size[i]这个边上，长度不大于target，我们就放上面30        size[i] +&#x3D; nums[index];31        &#x2F;&#x2F;然后在放下一个火柴，如果最终能变成正方形，直接返回true32        if (backtrack(nums, index + 1, target, size))33            return true;34        &#x2F;&#x2F;如果当前火柴放到size[i]这个边上，最终不能构成正方形，我们就把他从35        &#x2F;&#x2F;size[i]这个边上给移除，然后在试其他的边36        size[i] -&#x3D; nums[index];37    &#125;38    &#x2F;&#x2F;如果不能构成正方形，直接返回false39    return false;40  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题（一）</title>
      <link href="2020/11/29/1/"/>
      <url>2020/11/29/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="430" height="86" src="//music.163.com/outchain/player?type=2&id=114389&auto=0&height=66"></iframe><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给你一个字符串s，找到s中最长的回文子串。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>输入:s=”babad”<br>输出:”baa”<br>解释:”aba”同样符合题意</p><h2 id="方法一：暴力求解"><a href="#方法一：暴力求解" class="headerlink" title="方法一：暴力求解"></a>方法一：暴力求解</h2><p>暴力求解是最容易想到的，要截取字符串的所有子串，然后再判断这些子串中哪些是回文<br>的，最后返回回文子串中最长的即可。</p><p>这里我们可以使用两个变量，一个记录最长回文子串开始的位置，一个记录最长回文子串<br>的长度，最后再截取。代码如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">public String longestPalindrome(String s)&#123;if(s.length()&lt;2)&#123; return s&#125;;int start&#x3D;0,MaxLen&#x3D;0;for(int i&#x3D;0;i&lt;s.length()-1;i++)&#123;for(int j&#x3D;0;j&lt;s.length();j++)&#123;if(j-i&lt;MaxLen)&#123;continue;&#125;if(isPalindrome(s,i,j))&#123;if(MaxLen&lt;j-i+1)&#123;start&#x3D;i;MaxLen&#x3D;j-i+1;&#125;&#125;&#125;&#125;return s.substring(start,start+MaxLen);&#125; private boolean isPalindrome(String s,int i,int j)&#123;while(i&lt;j)&#123;if(s.charAt(i++) !&#x3D; s.charAt(j--)&#123;return false;&#125;&#125;return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二：-动态规划"><a href="#方法二：-动态规划" class="headerlink" title="方法二： 动态规划"></a>方法二： 动态规划</h2><p>定义二维数组dp[length][length]，如果dp[left][right]为true，则表示字符串从left到right<br>是回文子串，如果dp[left][right]为false，则表示字符串从left到right不是回文子串。</p><p>如果dp[left+1][right -1]为true，我们判断s.charAt(left)和s.charAt(right)是否相等，如果<br>相等，那么dp[left][right]肯定也是回文子串，否则dp[left][right]一定不是回文子串。</p><p>所以我们可以找出递推公式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dp[left][right]&#x3D;s.charAt(left)&#x3D;&#x3D;s.charAt(right)&amp;&amp;dp[left+1][right-1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了递推公式，还要确定边界条件：<br>如果s.charAt(left)！=s.charAt(right)，那么字符串从left到right是不可能构成子串<br>的，直接跳过即可。</p><p>如果s.charAt(left)==s.charAt(right)，字符串从left到right能不能构成回文子串还<br>需要进一步判断<br>    如果left==right，也就是说只有一个字符，我们认为他是回文子串。即dp[left][right]=true（left==right）<br>    如果right-left&lt;=2，类似于”aa”，或者”aba” ，我们认为他是回文子串 。 即dp[left][right]=true（right-left&lt;=2）<br>    如果right-left&gt;2，我们只需要判断dp[left+1][right-1]是否是回文子串，才能确定dp[left][right]是否为true还是false。<br>即dp[left][right]=dp[left+1][right -1]。</p><p>代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 1 public static String longestPalindrome(String s) &#123; 2     &#x2F;&#x2F;边界条件判断 3     if (s.length() &lt; 2) 4        return s; 5     &#x2F;&#x2F;start表示最长回文串开始的位置， 6     &#x2F;&#x2F;maxLen表示最长回文串的长度 7     int start &#x3D; 0, maxLen &#x3D; 1; 8     int length &#x3D; s.length(); 9     boolean[][] dp &#x3D; new boolean[length][length];10     for (int right &#x3D; 1; right &lt; length; right++) &#123;11           for (int left &#x3D; 0; left &lt; right; left++) &#123;12               &#x2F;&#x2F;如果两种字符不相同，肯定不能构成回文子串13               if (s.charAt(left) !&#x3D; s.charAt(right))14                   continue;1516               &#x2F;&#x2F;下面是s.charAt(left)和s.charAt(right)两个17               &#x2F;&#x2F;字符相同情况下的判断18               &#x2F;&#x2F;如果只有一个字符，肯定是回文子串19               if (right &#x3D;&#x3D; left) &#123;20               dp[left][right] &#x3D; true;21               &#125; else if (right - left &lt;&#x3D; 2) &#123;22               &#x2F;&#x2F;类似于&quot;aa&quot;和&quot;aba&quot;，也是回文子串23               dp[left][right] &#x3D; true;24               &#125; else &#123;25               &#x2F;&#x2F;类似于&quot;a******a&quot;，要判断他是否是回文子串，只需要26               &#x2F;&#x2F;判断&quot;******&quot;是否是回文子串即可27               dp[left][right] &#x3D; dp[left + 1][right - 1];28               &#125;29               &#x2F;&#x2F;如果字符串从left到right是回文子串，只需要保存最长的即可30               if (dp[left][right] &amp;&amp; right - left + 1 &gt; maxLen) &#123;31               maxLen &#x3D; right - left + 1;32               start &#x3D; left;33            &#125;34    &#125;35    &#x2F;&#x2F;截取最长的回文子串36    return s.substring(start, start + maxLen);37 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
